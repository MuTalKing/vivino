/*
 * This file is generated by jOOQ.
 */
package db.jooq.vivino.tables;


import db.jooq.vivino.Vivino;
import db.jooq.vivino.tables.records.WinesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Wines extends TableImpl<WinesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>vivino.wines</code>
     */
    public static final Wines WINES = new Wines();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WinesRecord> getRecordType() {
        return WinesRecord.class;
    }

    /**
     * The column <code>vivino.wines.id</code>.
     */
    public final TableField<WinesRecord, String> ID = createField(DSL.name("id"), SQLDataType.CHAR(36), this, "");

    /**
     * The column <code>vivino.wines.name</code>.
     */
    public final TableField<WinesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>vivino.wines.rate</code>.
     */
    public final TableField<WinesRecord, String> RATE = createField(DSL.name("rate"), SQLDataType.VARCHAR(100), this, "");

    private Wines(Name alias, Table<WinesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Wines(Name alias, Table<WinesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>vivino.wines</code> table reference
     */
    public Wines(String alias) {
        this(DSL.name(alias), WINES);
    }

    /**
     * Create an aliased <code>vivino.wines</code> table reference
     */
    public Wines(Name alias) {
        this(alias, WINES);
    }

    /**
     * Create a <code>vivino.wines</code> table reference
     */
    public Wines() {
        this(DSL.name("wines"), null);
    }

    public <O extends Record> Wines(Table<O> child, ForeignKey<O, WinesRecord> key) {
        super(child, key, WINES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Vivino.VIVINO;
    }

    @Override
    public Wines as(String alias) {
        return new Wines(DSL.name(alias), this);
    }

    @Override
    public Wines as(Name alias) {
        return new Wines(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Wines rename(String name) {
        return new Wines(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Wines rename(Name name) {
        return new Wines(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
